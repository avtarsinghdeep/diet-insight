/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { patchEventTarget } from '../common/events';
Zone.__load_patch('EventEmitter', function (global) {
    // For EventEmitter
    var EE_ADD_LISTENER = 'addListener';
    var EE_PREPEND_LISTENER = 'prependListener';
    var EE_REMOVE_LISTENER = 'removeListener';
    var EE_REMOVE_ALL_LISTENER = 'removeAllListeners';
    var EE_LISTENERS = 'listeners';
    var EE_ON = 'on';
    var compareTaskCallbackVsDelegate = function (task, delegate) {
        // same callback, same capture, same event name, just return
        return task.callback === delegate || task.callback.listener === delegate;
    };
    var eventNameToString = function (eventName) {
        if (typeof eventName === 'string') {
            return eventName;
        }
        if (!eventName) {
            return '';
        }
        return eventName.toString().replace('(', '_').replace(')', '_');
    };
    function patchEventEmitterMethods(obj) {
        var result = patchEventTarget(global, [obj], {
            useG: false,
            add: EE_ADD_LISTENER,
            rm: EE_REMOVE_LISTENER,
            prepend: EE_PREPEND_LISTENER,
            rmAll: EE_REMOVE_ALL_LISTENER,
            listeners: EE_LISTENERS,
            chkDup: false,
            rt: true,
            diff: compareTaskCallbackVsDelegate,
            eventNameToString: eventNameToString
        });
        if (result && result[0]) {
            obj[EE_ON] = obj[EE_ADD_LISTENER];
        }
    }
    // EventEmitter
    var events;
    try {
        events = require('events');
    }
    catch (err) {
    }
    if (events && events.EventEmitter) {
        patchEventEmitterMethods(events.EventEmitter.prototype);
    }
});
//# sourceMappingURL=events.js.map